module shift_register (
    input logic clk, rst, Reg_Start, Ready, Din, no_count,
    output logic [7:0] data_receive, show_internal
);
    logic [7:0] internal_shift_register;

    always_ff @(posedge clk, posedge rst) begin
        if (rst)
            internal_shift_register <= 8'b0; // Reset internal shift register
        else
            if (Reg_Start == 1'b1) begin
                internal_shift_register <= {internal_shift_register[6:0], Din}; // Shift data
            end
            else begin
                internal_shift_register <= 8'b0;
            end
    end

    always_comb begin
        if (no_count == 1'b1)begin
            data_receive = 8'b0;
        end
        else
            if (Ready == 1) begin
                data_receive = internal_shift_register; // Set data_receive when sync key detected
            end 
            else begin
                data_receive = 8'b0; //Clear data_receive if not ready
        end
    end
    assign show_internal = internal_shift_register;
endmodule