
module shift_register (
    input logic clk, rst, Reg_Start, Ready, Din, falling_edge,
    output logic [7:0] data_receive, show_internal
);
    logic [9:0] internal_shift_register;

    always_ff @(posedge clk, posedge rst) begin
        if (rst)
            internal_shift_register <= 10'b0; // Reset internal shift register
        else
            if (Reg_Start == 1'b1) begin
                internal_shift_register <= {Din, internal_shift_register[9:1]}; // Shift data
            end
            else begin
                internal_shift_register <= 10'b0;
            end
    end

    always_comb begin
        if (Ready == 1) begin
            data_receive = {internal_shift_register[8:1]}; // Set data_receive when sync key detected
        end 
        else begin
            data_receive = 10'b0; // Clear data_receive if not ready
        end
        assign show_internal = internal_shift_register; 
    end
endmodule