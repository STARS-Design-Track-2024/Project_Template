module FSM(
    input logic clk, rst, Start, Ready_Sig, no_count,
    output logic [2:0]state_check,
    output logic Success, Reg_Start, Count_Start
);

    typedef enum logic[2:0] {IDLE, RECEIVING, STOP} turnstile_t;
    turnstile_t current_state, next_state;

    always_ff@(posedge clk, posedge rst) begin
	    if (rst)
		    current_state <= IDLE;
        else 
		    current_state <= next_state;
    end

    always_comb begin
        Success = 1'b0;
        Reg_Start = 1'b0;
        Count_Start = 1'b0;
	    case(current_state)
		    IDLE: begin
                Success = 1'b1;
			    if (Start == 1) begin
				    next_state = RECEIVING;
                end
			    else begin
				    next_state = current_state;
                end
                state_check = current_state;
		    end
		    RECEIVING: begin
                //if (falling_edge == 0)begin
                    //next_state = current_state;
                //end 
                //else begin
                    Count_Start = 1;
                    Reg_Start = 1;
                    Success = 0;
                    if (no_count == 1'b1) begin 
                      next_state = current_state;
                    end
                    else begin
                        next_state = current_state;
                    end
            end
            STOP: begin
                Count_Start = 0;
                Reg_Start = 0;
                Success = 1;
			    next_state = IDLE;
                state_check = current_state;
		    end
        endcase
    end
endmodule